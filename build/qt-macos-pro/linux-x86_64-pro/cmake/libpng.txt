cmake_minimum_required(VERSION 3.0.2)

set(CMAKE_AUTOUIC OFF)
set(CMAKE_AUTOMOC OFF)
set(CMAKE_AUTORCC OFF)

project(png C ASM)

set(PNGLIB_MAJOR 1)
set(PNGLIB_MINOR 6)
set(PNGLIB_RELEASE 35)

# Use CPU-specific files
option(PNG_HARDWARE_OPTIMIZATIONS "Enable Hardware Optimizations" ON)
if(PNG_HARDWARE_OPTIMIZATIONS)
  # set definitions and sources for intel
  if(CMAKE_SYSTEM_PROCESSOR MATCHES "^i?86" OR
     CMAKE_SYSTEM_PROCESSOR MATCHES "^x86_64*" )
    set(PNG_INTEL_SSE_POSSIBLE_VALUES on off)
    set(PNG_INTEL_SSE "on" CACHE STRING "Enable INTEL_SSE optimizations:
       off: disable the optimizations")
    set_property(CACHE PNG_INTEL_SSE PROPERTY STRINGS
       ${PNG_INTEL_SSE_POSSIBLE_VALUES})
    list(FIND PNG_INTEL_SSE_POSSIBLE_VALUES ${PNG_INTEL_SSE} index)
    if(index EQUAL -1)
      message(FATAL_ERROR
        " PNG_INTEL_SSE must be one of [${PNG_INTEL_SSE_POSSIBLE_VALUES}]")
    elseif(NOT ${PNG_INTEL_SSE} STREQUAL "no")
      set(libpng_intel_sources
        intel/intel_init.c
        intel/filter_sse2_intrinsics.c)
      if(${PNG_INTEL_SSE} STREQUAL "on")
        add_definitions(-DPNG_INTEL_SSE_OPT=1)
      endif()
    else()
      add_definitions(-DPNG_INTEL_SSE_OPT=0)
    endif()
  endif()

  # set definitions and sources for arm
  if(CMAKE_SYSTEM_PROCESSOR MATCHES "^arm" OR
     CMAKE_SYSTEM_PROCESSOR MATCHES "^aarch64")
    set(PNG_ARM_NEON_POSSIBLE_VALUES check on off)
    set(PNG_ARM_NEON "check" CACHE STRING "Enable ARM NEON optimizations:
       check: (default) use internal checking code;
       off: disable the optimizations;
       on: turn on unconditionally.")
    set_property(CACHE PNG_ARM_NEON PROPERTY STRINGS
       ${PNG_ARM_NEON_POSSIBLE_VALUES})
    list(FIND PNG_ARM_NEON_POSSIBLE_VALUES ${PNG_ARM_NEON} index)
    if(index EQUAL -1)
      message(FATAL_ERROR
        " PNG_ARM_NEON must be one of [${PNG_ARM_NEON_POSSIBLE_VALUES}]")
    elseif(NOT ${PNG_ARM_NEON} STREQUAL "no")
      set(libpng_arm_sources
        arm/arm_init.c
        arm/filter_neon.S
        arm/filter_neon_intrinsics.c)

      if(${PNG_ARM_NEON} STREQUAL "on")
        add_definitions(-DPNG_ARM_NEON_OPT=2)
      elseif(${PNG_ARM_NEON} STREQUAL "check")
        add_definitions(-DPNG_ARM_NEON_CHECK_SUPPORTED)
      endif()
    else()
      add_definitions(-DPNG_ARM_NEON_OPT=0)
    endif()
  endif()
endif(PNG_HARDWARE_OPTIMIZATIONS)

# Use prebuilt pnglibconf.h
configure_file(scripts/pnglibconf.h.prebuilt pnglibconf.h)

# Set sources
set(libpng_public_hdrs
  png.h
  pngconf.h
  pnglibconf.h
)
set(libpng_private_hdrs
  pngpriv.h
  pngdebug.h
  pnginfo.h
  pngstruct.h
)
set(libpng_sources
  ${libpng_public_hdrs}
  ${libpng_private_hdrs}
  png.c
  pngerror.c
  pngget.c
  pngmem.c
  pngpread.c
  pngread.c
  pngrio.c
  pngrtran.c
  pngrutil.c
  pngset.c
  pngtrans.c
  pngwio.c
  pngwrite.c
  pngwtran.c
  pngwutil.c
  ${libpng_arm_sources}
  ${libpng_intel_sources}
)

# zlib
add_subdirectory(zlib)
include_directories(zlib)
set(ZLIB_INCLUDE_DIR zlib)

# Include
include_directories(${CMAKE_CURRENT_SOURCE_DIR} ${ZLIB_INCLUDE_DIR})

# Build
add_library(
	png
	STATIC
	${libpng_sources}
)

# Install headers
install(
	FILES
	${libpng_public_hdrs}
	DESTINATION
	include
)
